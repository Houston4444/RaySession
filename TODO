client noSavelLevel gardé comme ça pour l'instant parce client.no_save_level existe

-> Déprecier no_save_level de l'exterieur, uniquement en RayHack

afficher le sous dossier -> preview ; session en cours

Display server address in window title (network session).
Icons with multiple possibilities ???
Start/Stop all clients f


ray_control doc /ray/server/clear_client_templates_database


Patchbay:
Zones (far future) ?
PW video ports ?
Damn connections (with ray-jackpatch)
icons in theme

etree pour le renommage de modèles (daemon)
barre d'outils sur 2 lignes possible
outil pour session récentes
régler le nb de sessions récentes dans les préfs
favoriser le démon unique


# NEW PATCHBAY
Default port types view : Qu'en faire ?
la liste des vues proposées dans config
clear absents à gérer

vues et sessions
    si vue modifiée (nom, ptv, white_list):
        change dans config
    sinon:
        si inexistante dans config:
            suppr de la conf
        sinon:
            retour à la conf

Plan de fonctionnement:
    côté démon:
        Connexion de l'IGU:
            envoi de tout du démon à l'IGU
                pas de retour
        chargement de session:
            envoi des positions + vues mixées
                oublier tout, recharger
                pas de retour
        décharge de session:
            envoie des vues config  
                pas de retour

    côté IGU:
        Modification d'une/des vues
            envoi vues
                pas de retour du démon
        changement vue et/ou ptv
            envoi vue+ptv
                pas de retour
    

Qt6:
    Bookmark file picker Qt6
    QFontMetrics.width ?
    suppr refs à PyXml dans le démon (...)

TCP:
    À voir éventuellement, mais pas sûr vu que ça ne reconnait pas la src_addr
    qui est beaucoup utilisée.


Pretty names dans RS:
    nécessite un patchbay daemon permanent, un soupçon plus de ressources sans GUI,
    mais tellement plus simple et fiable.

    action:
        sauvegarder direct dans la base du patchbay
        Envoyer au démon de quoi mettre à jour sa base
            Le démon:
                enregistre dans sa base
                update la base du patchbay daemon

    nouveau port dans patchbay:
        appliquer le pretty_name contenu dans la base du patchbay

    nouveau port dans patchbay_daemon:
        (nécessite une communication TCP ou UNIX directe avec le démon)
        appliquer les métadonnées par rapport à la base
            après la liste du graphe
            Xms après l'apparition d'un port ou d'un client (200ms ?)

    réception d'un pretty name dans le patchbay_daemon depuis le démon:
        appliquer les métadonnées immédiatement



review server_sender and called methods


fix: load session patch hides/restore boxes,
    but there are present before and after.

PATHS: 
    import osc_paths as p
    import osc_paths.ray as r
    import osc_paths.ray.gui as rg
    import osc_paths.ray.gui as rgp
    import osc_paths.nsm as nsm

    dict généré pour les liaisons gui_session et session_signaled
    plutôt que les methodes basées sur le nom du path (en gardant les mêmes)
